//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace avmKimaiSoapReports.KimaiService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Kimai_Remote_ApiBinding", Namespace="https://demo.kimai.org/core/soap.php")]
    public partial class Kimai_Remote_ApiService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback authenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback startRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback stopRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActiveRecordingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimesheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimesheetRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTimesheetRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeTimesheetRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExpensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExpenseRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback setExpenseRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeExpenseRecordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Kimai_Remote_ApiService() {
            this.Url = global::avmKimaiSoapReports.Properties.Settings.Default.avmKimaiReports_KimaiService_Kimai_Remote_ApiService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event authenticateCompletedEventHandler authenticateCompleted;
        
        /// <remarks/>
        public event startRecordCompletedEventHandler startRecordCompleted;
        
        /// <remarks/>
        public event stopRecordCompletedEventHandler stopRecordCompleted;
        
        /// <remarks/>
        public event getUsersCompletedEventHandler getUsersCompleted;
        
        /// <remarks/>
        public event getCustomersCompletedEventHandler getCustomersCompleted;
        
        /// <remarks/>
        public event getProjectsCompletedEventHandler getProjectsCompleted;
        
        /// <remarks/>
        public event getTasksCompletedEventHandler getTasksCompleted;
        
        /// <remarks/>
        public event getActiveRecordingCompletedEventHandler getActiveRecordingCompleted;
        
        /// <remarks/>
        public event getTimesheetCompletedEventHandler getTimesheetCompleted;
        
        /// <remarks/>
        public event getTimesheetRecordCompletedEventHandler getTimesheetRecordCompleted;
        
        /// <remarks/>
        public event setTimesheetRecordCompletedEventHandler setTimesheetRecordCompleted;
        
        /// <remarks/>
        public event removeTimesheetRecordCompletedEventHandler removeTimesheetRecordCompleted;
        
        /// <remarks/>
        public event getExpensesCompletedEventHandler getExpensesCompleted;
        
        /// <remarks/>
        public event getExpenseRecordCompletedEventHandler getExpenseRecordCompleted;
        
        /// <remarks/>
        public event setExpenseRecordCompletedEventHandler setExpenseRecordCompleted;
        
        /// <remarks/>
        public event removeExpenseRecordCompletedEventHandler removeExpenseRecordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#authenticate", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] authenticate(string username, string password) {
            object[] results = this.Invoke("authenticate", new object[] {
                        username,
                        password});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void authenticateAsync(string username, string password) {
            this.authenticateAsync(username, password, null);
        }
        
        /// <remarks/>
        public void authenticateAsync(string username, string password, object userState) {
            if ((this.authenticateOperationCompleted == null)) {
                this.authenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateOperationCompleted);
            }
            this.InvokeAsync("authenticate", new object[] {
                        username,
                        password}, this.authenticateOperationCompleted, userState);
        }
        
        private void OnauthenticateOperationCompleted(object arg) {
            if ((this.authenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateCompleted(this, new authenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#startRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] startRecord(string apiKey, int projectId, int activityId) {
            object[] results = this.Invoke("startRecord", new object[] {
                        apiKey,
                        projectId,
                        activityId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void startRecordAsync(string apiKey, int projectId, int activityId) {
            this.startRecordAsync(apiKey, projectId, activityId, null);
        }
        
        /// <remarks/>
        public void startRecordAsync(string apiKey, int projectId, int activityId, object userState) {
            if ((this.startRecordOperationCompleted == null)) {
                this.startRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartRecordOperationCompleted);
            }
            this.InvokeAsync("startRecord", new object[] {
                        apiKey,
                        projectId,
                        activityId}, this.startRecordOperationCompleted, userState);
        }
        
        private void OnstartRecordOperationCompleted(object arg) {
            if ((this.startRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startRecordCompleted(this, new startRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#stopRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool stopRecord(string apiKey, int entryId) {
            object[] results = this.Invoke("stopRecord", new object[] {
                        apiKey,
                        entryId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void stopRecordAsync(string apiKey, int entryId) {
            this.stopRecordAsync(apiKey, entryId, null);
        }
        
        /// <remarks/>
        public void stopRecordAsync(string apiKey, int entryId, object userState) {
            if ((this.stopRecordOperationCompleted == null)) {
                this.stopRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstopRecordOperationCompleted);
            }
            this.InvokeAsync("stopRecord", new object[] {
                        apiKey,
                        entryId}, this.stopRecordOperationCompleted, userState);
        }
        
        private void OnstopRecordOperationCompleted(object arg) {
            if ((this.stopRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.stopRecordCompleted(this, new stopRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getUsers", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getUsers(string apiKey) {
            object[] results = this.Invoke("getUsers", new object[] {
                        apiKey});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getUsersAsync(string apiKey) {
            this.getUsersAsync(apiKey, null);
        }
        
        /// <remarks/>
        public void getUsersAsync(string apiKey, object userState) {
            if ((this.getUsersOperationCompleted == null)) {
                this.getUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersOperationCompleted);
            }
            this.InvokeAsync("getUsers", new object[] {
                        apiKey}, this.getUsersOperationCompleted, userState);
        }
        
        private void OngetUsersOperationCompleted(object arg) {
            if ((this.getUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersCompleted(this, new getUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getCustomers", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getCustomers(string apiKey) {
            object[] results = this.Invoke("getCustomers", new object[] {
                        apiKey});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getCustomersAsync(string apiKey) {
            this.getCustomersAsync(apiKey, null);
        }
        
        /// <remarks/>
        public void getCustomersAsync(string apiKey, object userState) {
            if ((this.getCustomersOperationCompleted == null)) {
                this.getCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomersOperationCompleted);
            }
            this.InvokeAsync("getCustomers", new object[] {
                        apiKey}, this.getCustomersOperationCompleted, userState);
        }
        
        private void OngetCustomersOperationCompleted(object arg) {
            if ((this.getCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomersCompleted(this, new getCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getProjects", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getProjects(string apiKey, object includeTasks) {
            object[] results = this.Invoke("getProjects", new object[] {
                        apiKey,
                        includeTasks});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getProjectsAsync(string apiKey, object includeTasks) {
            this.getProjectsAsync(apiKey, includeTasks, null);
        }
        
        /// <remarks/>
        public void getProjectsAsync(string apiKey, object includeTasks, object userState) {
            if ((this.getProjectsOperationCompleted == null)) {
                this.getProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectsOperationCompleted);
            }
            this.InvokeAsync("getProjects", new object[] {
                        apiKey,
                        includeTasks}, this.getProjectsOperationCompleted, userState);
        }
        
        private void OngetProjectsOperationCompleted(object arg) {
            if ((this.getProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectsCompleted(this, new getProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getTasks", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getTasks(string apiKey, int projectId) {
            object[] results = this.Invoke("getTasks", new object[] {
                        apiKey,
                        projectId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getTasksAsync(string apiKey, int projectId) {
            this.getTasksAsync(apiKey, projectId, null);
        }
        
        /// <remarks/>
        public void getTasksAsync(string apiKey, int projectId, object userState) {
            if ((this.getTasksOperationCompleted == null)) {
                this.getTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTasksOperationCompleted);
            }
            this.InvokeAsync("getTasks", new object[] {
                        apiKey,
                        projectId}, this.getTasksOperationCompleted, userState);
        }
        
        private void OngetTasksOperationCompleted(object arg) {
            if ((this.getTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTasksCompleted(this, new getTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getActiveRecording", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getActiveRecording(string apiKey) {
            object[] results = this.Invoke("getActiveRecording", new object[] {
                        apiKey});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getActiveRecordingAsync(string apiKey) {
            this.getActiveRecordingAsync(apiKey, null);
        }
        
        /// <remarks/>
        public void getActiveRecordingAsync(string apiKey, object userState) {
            if ((this.getActiveRecordingOperationCompleted == null)) {
                this.getActiveRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActiveRecordingOperationCompleted);
            }
            this.InvokeAsync("getActiveRecording", new object[] {
                        apiKey}, this.getActiveRecordingOperationCompleted, userState);
        }
        
        private void OngetActiveRecordingOperationCompleted(object arg) {
            if ((this.getActiveRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActiveRecordingCompleted(this, new getActiveRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getTimesheet", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getTimesheet(string apiKey, int from, int to, int cleared, int start, int limit) {
            object[] results = this.Invoke("getTimesheet", new object[] {
                        apiKey,
                        from,
                        to,
                        cleared,
                        start,
                        limit});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getTimesheetAsync(string apiKey, int from, int to, int cleared, int start, int limit) {
            this.getTimesheetAsync(apiKey, from, to, cleared, start, limit, null);
        }
        
        /// <remarks/>
        public void getTimesheetAsync(string apiKey, int from, int to, int cleared, int start, int limit, object userState) {
            if ((this.getTimesheetOperationCompleted == null)) {
                this.getTimesheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimesheetOperationCompleted);
            }
            this.InvokeAsync("getTimesheet", new object[] {
                        apiKey,
                        from,
                        to,
                        cleared,
                        start,
                        limit}, this.getTimesheetOperationCompleted, userState);
        }
        
        private void OngetTimesheetOperationCompleted(object arg) {
            if ((this.getTimesheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimesheetCompleted(this, new getTimesheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getTimesheetRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getTimesheetRecord(string apiKey, int id) {
            object[] results = this.Invoke("getTimesheetRecord", new object[] {
                        apiKey,
                        id});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getTimesheetRecordAsync(string apiKey, int id) {
            this.getTimesheetRecordAsync(apiKey, id, null);
        }
        
        /// <remarks/>
        public void getTimesheetRecordAsync(string apiKey, int id, object userState) {
            if ((this.getTimesheetRecordOperationCompleted == null)) {
                this.getTimesheetRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimesheetRecordOperationCompleted);
            }
            this.InvokeAsync("getTimesheetRecord", new object[] {
                        apiKey,
                        id}, this.getTimesheetRecordOperationCompleted, userState);
        }
        
        private void OngetTimesheetRecordOperationCompleted(object arg) {
            if ((this.getTimesheetRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimesheetRecordCompleted(this, new getTimesheetRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#setTimesheetRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] setTimesheetRecord(string apiKey, object[] record, bool doUpdate) {
            object[] results = this.Invoke("setTimesheetRecord", new object[] {
                        apiKey,
                        record,
                        doUpdate});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void setTimesheetRecordAsync(string apiKey, object[] record, bool doUpdate) {
            this.setTimesheetRecordAsync(apiKey, record, doUpdate, null);
        }
        
        /// <remarks/>
        public void setTimesheetRecordAsync(string apiKey, object[] record, bool doUpdate, object userState) {
            if ((this.setTimesheetRecordOperationCompleted == null)) {
                this.setTimesheetRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTimesheetRecordOperationCompleted);
            }
            this.InvokeAsync("setTimesheetRecord", new object[] {
                        apiKey,
                        record,
                        doUpdate}, this.setTimesheetRecordOperationCompleted, userState);
        }
        
        private void OnsetTimesheetRecordOperationCompleted(object arg) {
            if ((this.setTimesheetRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTimesheetRecordCompleted(this, new setTimesheetRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#removeTimesheetRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] removeTimesheetRecord(string apiKey, int id) {
            object[] results = this.Invoke("removeTimesheetRecord", new object[] {
                        apiKey,
                        id});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void removeTimesheetRecordAsync(string apiKey, int id) {
            this.removeTimesheetRecordAsync(apiKey, id, null);
        }
        
        /// <remarks/>
        public void removeTimesheetRecordAsync(string apiKey, int id, object userState) {
            if ((this.removeTimesheetRecordOperationCompleted == null)) {
                this.removeTimesheetRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveTimesheetRecordOperationCompleted);
            }
            this.InvokeAsync("removeTimesheetRecord", new object[] {
                        apiKey,
                        id}, this.removeTimesheetRecordOperationCompleted, userState);
        }
        
        private void OnremoveTimesheetRecordOperationCompleted(object arg) {
            if ((this.removeTimesheetRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeTimesheetRecordCompleted(this, new removeTimesheetRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getExpenses", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getExpenses(string apiKey, int from, int to, int refundable, int cleared, int start, int limit) {
            object[] results = this.Invoke("getExpenses", new object[] {
                        apiKey,
                        from,
                        to,
                        refundable,
                        cleared,
                        start,
                        limit});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getExpensesAsync(string apiKey, int from, int to, int refundable, int cleared, int start, int limit) {
            this.getExpensesAsync(apiKey, from, to, refundable, cleared, start, limit, null);
        }
        
        /// <remarks/>
        public void getExpensesAsync(string apiKey, int from, int to, int refundable, int cleared, int start, int limit, object userState) {
            if ((this.getExpensesOperationCompleted == null)) {
                this.getExpensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExpensesOperationCompleted);
            }
            this.InvokeAsync("getExpenses", new object[] {
                        apiKey,
                        from,
                        to,
                        refundable,
                        cleared,
                        start,
                        limit}, this.getExpensesOperationCompleted, userState);
        }
        
        private void OngetExpensesOperationCompleted(object arg) {
            if ((this.getExpensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExpensesCompleted(this, new getExpensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#getExpenseRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] getExpenseRecord(string apiKey, int id) {
            object[] results = this.Invoke("getExpenseRecord", new object[] {
                        apiKey,
                        id});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getExpenseRecordAsync(string apiKey, int id) {
            this.getExpenseRecordAsync(apiKey, id, null);
        }
        
        /// <remarks/>
        public void getExpenseRecordAsync(string apiKey, int id, object userState) {
            if ((this.getExpenseRecordOperationCompleted == null)) {
                this.getExpenseRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExpenseRecordOperationCompleted);
            }
            this.InvokeAsync("getExpenseRecord", new object[] {
                        apiKey,
                        id}, this.getExpenseRecordOperationCompleted, userState);
        }
        
        private void OngetExpenseRecordOperationCompleted(object arg) {
            if ((this.getExpenseRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExpenseRecordCompleted(this, new getExpenseRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#setExpenseRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] setExpenseRecord(string apiKey, object[] record, bool doUpdate) {
            object[] results = this.Invoke("setExpenseRecord", new object[] {
                        apiKey,
                        record,
                        doUpdate});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void setExpenseRecordAsync(string apiKey, object[] record, bool doUpdate) {
            this.setExpenseRecordAsync(apiKey, record, doUpdate, null);
        }
        
        /// <remarks/>
        public void setExpenseRecordAsync(string apiKey, object[] record, bool doUpdate, object userState) {
            if ((this.setExpenseRecordOperationCompleted == null)) {
                this.setExpenseRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetExpenseRecordOperationCompleted);
            }
            this.InvokeAsync("setExpenseRecord", new object[] {
                        apiKey,
                        record,
                        doUpdate}, this.setExpenseRecordOperationCompleted, userState);
        }
        
        private void OnsetExpenseRecordOperationCompleted(object arg) {
            if ((this.setExpenseRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setExpenseRecordCompleted(this, new setExpenseRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("https://demo.kimai.org/core/soap.php#removeExpenseRecord", RequestNamespace="https://demo.kimai.org/core/soap.php", ResponseNamespace="https://demo.kimai.org/core/soap.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object[] removeExpenseRecord(string apiKey, int id) {
            object[] results = this.Invoke("removeExpenseRecord", new object[] {
                        apiKey,
                        id});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void removeExpenseRecordAsync(string apiKey, int id) {
            this.removeExpenseRecordAsync(apiKey, id, null);
        }
        
        /// <remarks/>
        public void removeExpenseRecordAsync(string apiKey, int id, object userState) {
            if ((this.removeExpenseRecordOperationCompleted == null)) {
                this.removeExpenseRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveExpenseRecordOperationCompleted);
            }
            this.InvokeAsync("removeExpenseRecord", new object[] {
                        apiKey,
                        id}, this.removeExpenseRecordOperationCompleted, userState);
        }
        
        private void OnremoveExpenseRecordOperationCompleted(object arg) {
            if ((this.removeExpenseRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeExpenseRecordCompleted(this, new removeExpenseRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void authenticateCompletedEventHandler(object sender, authenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void startRecordCompletedEventHandler(object sender, startRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class startRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal startRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void stopRecordCompletedEventHandler(object sender, stopRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class stopRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal stopRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getUsersCompletedEventHandler(object sender, getUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getCustomersCompletedEventHandler(object sender, getCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getProjectsCompletedEventHandler(object sender, getProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getTasksCompletedEventHandler(object sender, getTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getActiveRecordingCompletedEventHandler(object sender, getActiveRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActiveRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActiveRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getTimesheetCompletedEventHandler(object sender, getTimesheetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimesheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimesheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getTimesheetRecordCompletedEventHandler(object sender, getTimesheetRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimesheetRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimesheetRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void setTimesheetRecordCompletedEventHandler(object sender, setTimesheetRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setTimesheetRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setTimesheetRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void removeTimesheetRecordCompletedEventHandler(object sender, removeTimesheetRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeTimesheetRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeTimesheetRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getExpensesCompletedEventHandler(object sender, getExpensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExpensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExpensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getExpenseRecordCompletedEventHandler(object sender, getExpenseRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExpenseRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExpenseRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void setExpenseRecordCompletedEventHandler(object sender, setExpenseRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setExpenseRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setExpenseRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void removeExpenseRecordCompletedEventHandler(object sender, removeExpenseRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeExpenseRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeExpenseRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591